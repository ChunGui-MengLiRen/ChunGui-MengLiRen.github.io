<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue常见特性</title>
    <link href="/2021/03/10/Vue%E5%B8%B8%E8%A7%81%E7%89%B9%E6%80%A7/"/>
    <url>/2021/03/10/Vue%E5%B8%B8%E8%A7%81%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue常见特性"><a href="#Vue常见特性" class="headerlink" title="Vue常见特性"></a>Vue常见特性</h1><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><ul><li>输入框</li></ul><p>设置v-model指令</p><ul><li>单选框</li></ul><p>多个单选框需要设置value且v-model指向同一个变量</p><ul><li>多选框</li></ul><p>多选框需要设置value属性且v-model指向同一个数组变量</p><ul><li>勾选框</li></ul><p>v-model需要指向一个布尔变量</p><ul><li>下拉框</li></ul><p>给select设置v-model，指向一个数组变量，option需要设置value属性</p><ul><li>文本域</li></ul><p>设置v-model指令</p><ul><li>提交 </li></ul><p>取消默认提交行为</p><ul><li>重置</li></ul><p>创建一个初始对象数据，给data中的数据拷贝一份，重置表单时重新还原初始对象的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mydata = &#123;<span class="hljs-comment">//表单原始数据</span><br>          uname: <span class="hljs-string">&quot;&quot;</span>,<br>          age: <span class="hljs-literal">null</span>,<br>          sex: <span class="hljs-string">&quot;男&quot;</span>,<br>          like: [],<br>          txt: <span class="hljs-string">&quot;我爱学习&quot;</span><br>      &#125;<br>      <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>          el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>          data: &#123;<br>              formdata: &#123; ...mydata &#125;<span class="hljs-comment">//拷贝数据</span><br>          &#125;,<br>          methods: &#123;<br>              <span class="hljs-comment">//表单重置方法</span><br>              <span class="hljs-function"><span class="hljs-title">reset</span>(<span class="hljs-params"></span>)</span> &#123;<br>                  <span class="hljs-built_in">this</span>.formdata = &#123; ...mydata &#125;<span class="hljs-comment">//重置表单时还原为原始数据</span><br>              &#125;<br>          &#125;<br>      &#125;);<br></code></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li><code>number</code></li></ul><p>转化为数值类型</p><ul><li><code>trim</code></li></ul><p>去除字符串两端空格</p><ul><li><code>lazy</code></li></ul><p>输入完才修改</p><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><ul><li>目的</li></ul><p>解决内置指令无法满足需求</p><ul><li>使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//全局自定义指令</span><br>     Vue.directive(<span class="hljs-string">&quot;focus&quot;</span>, &#123;<br>         <span class="hljs-comment">//el为使用自定义指令的DOM对象</span><br>         <span class="hljs-function"><span class="hljs-title">inserted</span>(<span class="hljs-params">el</span>)</span> &#123;<br>             el.focus();<br>         &#125;<br>     &#125;);<br>     <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>         el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>         data: &#123;<br>             res: <span class="hljs-string">&quot;&lt;h1&gt;标题&lt;/h1&gt;&quot;</span><br>         &#125;,<br>         <span class="hljs-comment">//局部自定义指令,binding是一个对象</span><br>         <span class="hljs-comment">//binding.value为使用指令的data中数据</span><br>         <span class="hljs-comment">//binding.expression为指令的指向的变量或表达式</span><br>         directives: &#123;<br>             <span class="hljs-function"><span class="hljs-title">myhtml</span>(<span class="hljs-params">el,binding</span>)</span> &#123;<br>                 <span class="hljs-built_in">console</span>.log(binding);<br>                 el.innerHTML = binding.value;<br>             &#125;<br>         &#125;<br>     &#125;);<br></code></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><ul><li>目的</li></ul><p>本质为属性，为了使模板使用更加方便，对data中的属性进行加工处理</p><ul><li>使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>          el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>          data: &#123;<br>              msg: <span class="hljs-string">&quot;芙蓉如面柳如眉&quot;</span>,<br>          &#125;,<br>          computed: &#123;<br>              <span class="hljs-comment">//计算属性不可以修改,除非改变定义方式</span><br>              <span class="hljs-comment">//反转字符串</span><br>              <span class="hljs-function"><span class="hljs-title">reverse</span>(<span class="hljs-params"></span>)</span> &#123;<br>                  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.msg.split(<span class="hljs-string">&quot;&quot;</span>).reverse().join(<span class="hljs-string">&quot;&quot;</span>);<br>              &#125;,<br>          &#125;<br> &#125;);<br></code></pre></td></tr></table></figure><ul><li>注意<ul><li>计算属性一般不能修改</li><li>计算属性只用当依赖的数据改变时才会重新执行</li></ul></li></ul><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><ul><li><p>目的</p><p>侦听属性发生改变</p></li><li><p>使用</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>            el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data: &#123;<br>                num: <span class="hljs-literal">null</span>,<br>                preson: &#123;<br>                    name: <span class="hljs-string">&quot;李明&quot;</span>,<br>                    age: <span class="hljs-number">20</span><br>                &#125;<br>            &#125;,<br>            watch: &#123;<br>                <span class="hljs-comment">//浅侦听（简单数据类型）侦听num改变</span><br>                <span class="hljs-function"><span class="hljs-title">num</span>(<span class="hljs-params">newval, oldval</span>)</span> &#123;<br>                    <span class="hljs-built_in">this</span>.newnum = newval;<br>                &#125;,<br>                <span class="hljs-comment">//深侦听（引用数据类型）侦听person改变</span><br>                preson: &#123;<br>                    deep: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newval, oldval</span>)</span> &#123;<br>                        <span class="hljs-built_in">console</span>.log(newval);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul><li>目的</li></ul><p>对数据进行加工处理用来满足模板的使用，本质为工具函数</p><ul><li>使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//全局过滤器 保留两位小数</span><br>Vue.filter(<span class="hljs-string">&quot;tofix&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val, n = <span class="hljs-number">2</span></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> val.toFixed(<span class="hljs-number">2</span>)<br>        &#125;);<br><br>        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>            el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data: &#123;<br>                msg: <span class="hljs-string">&#x27;&#x27;</span>,<br>                num: <span class="hljs-number">100.435</span>,<br>                money: <span class="hljs-number">100</span><br>            &#125;,<br>            <span class="hljs-comment">//局部过滤器 字符串前拼接字符</span><br>            filters: &#123;<br>                <span class="hljs-function"><span class="hljs-title">moneystr</span>(<span class="hljs-params">val, str = <span class="hljs-string">&quot;$&quot;</span></span>)</span> &#123;<br>                    <span class="hljs-keyword">return</span> str + val;<br>                &#125;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul><li>创建前 <code>beforeCreate</code></li></ul><p>data数据未初始化，无法操作data数据</p><ul><li>创建后 <code>created</code></li></ul><p>data中数据完成初始化，可以操作data数据，此时可以请求数据</p><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><ul><li>挂载前 <code>beforeMount</code></li></ul><p>数据未渲染到模板中</p><ul><li>挂载后 <code>mounted</code></li></ul><p>数据已经渲染到模板，可以使用插件初始化</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul><li>更新前 <code>beforeUpdate</code></li></ul><p>数据更新之前</p><ul><li>更新后 <code>update</code></li></ul><p>数据更新后，可以使用插件初始化</p><h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><ul><li>销毁前 <code>beforeDestory</code></li></ul><p>Vue实例销毁前 <code>vm.$destory()</code> 销毁当前实例</p><ul><li>销毁后 <code>destoryed</code></li></ul><p>Vue实例销毁之后</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>JavsScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础知识</title>
    <link href="/2021/03/08/Vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/03/08/Vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>渐进式<code>JavaScript</code>框架</p><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p><code>2.6.12</code></p><h3 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h3><p>尤雨溪</p><h3 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h3><p>IE8及以下不兼容</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>引入<code>vue.js</code></li></ol><ul><li>开发版</li><li>生产版</li></ul><ol start="2"><li>创建挂载节点</li></ol><ul><li>不能挂载到<code>body</code>和<code>html</code>标签上</li></ul><ol start="3"><li>实例化vue对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = Vue(&#123;<br>    el:<span class="hljs-string">&quot;#id&quot;</span>,<span class="hljs-comment">//挂载节点选择器</span><br>    data:&#123;<span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;数据&quot;</span>&#125;<span class="hljs-comment">//节点所使用的数据</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="指令是什么"><a href="#指令是什么" class="headerlink" title="指令是什么"></a>指令是什么</h3><ul><li>本质上指令就是自定义属性</li></ul><h3 id="指令的使用"><a href="#指令的使用" class="headerlink" title="指令的使用"></a>指令的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;标签 v-指令名 = <span class="hljs-string">&quot;变量/表达式&quot;</span>&gt;&lt;/标签&gt;<br></code></pre></td></tr></table></figure><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul><li><code>v-html </code>渲染页面内容可以渲染html标签</li><li><code>v-text </code>渲染文本内容</li><li><code>v-cloak</code> 防止页面闪烁</li><li><code>v-pre</code> 跳过编译，显示原内容</li><li><code>v-once</code> 只编译一次</li><li><code>v-on</code> 事件绑定</li><li><code>v-bind</code> 属性绑定</li><li><code>v-model</code> 双向数据绑定</li><li><code>v- if </code> 条件</li><li><code>v-for</code> 循环</li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//绑定</span><br>&lt;标签 v-on:事件类型=<span class="hljs-string">&quot;事件函数&quot;</span>&gt;&lt;/标签&gt;<br><span class="hljs-comment">//简写</span><br>&lt;标签 @事件类型=<span class="hljs-string">&quot;事件函数&quot;</span>&gt;&lt;/标签&gt;<br><span class="hljs-comment">//数据</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br>   el:<span class="hljs-string">&quot;&quot;</span>,<br>  data:&#123;&#125;,<br>  methods:&#123;<br>    事件函数()&#123; ... &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//事件绑定,$event为事件对象</span><br>&lt;标签 @事件类型=<span class="hljs-string">&quot;事件函数(实参,$event)&quot;</span>&gt;&lt;/标签&gt;<br><span class="hljs-comment">//数据</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br>   el:<span class="hljs-string">&quot;&quot;</span>,<br>  data:&#123;&#125;,<br>  methods:&#123;<br>    事件函数(形参一,形参二)&#123; ... &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li><p>基本修饰符</p><ul><li><code>.stop</code> 阻止冒泡</li><li><code>prevent</code> 取消默认事件</li><li><code>self</code> 自己触发</li><li><code>once</code> 只触发一次</li></ul></li><li><p>按键修饰符</p><ul><li><p><code>.enter</code> 按下回车</p></li><li><p><code>.delete</code> 按下删除和退格</p></li><li><p><code>.esc</code> 按下退出</p></li><li><p><code>Vue.config.keyCodes.修饰符名 = 按键码</code>自定义按键修饰符</p></li></ul></li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//属性绑定</span><br>&lt;a v-bind:href=<span class="hljs-string">&quot;变量/表达式&quot;</span>&gt;百度&lt;/a&gt;<br><span class="hljs-comment">//简写</span><br>&lt;a :href=<span class="hljs-string">&quot;变量/表达式&quot;</span>&gt;百度&lt;/a&gt;<br></code></pre></td></tr></table></figure><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><ul><li>对象 <code>&lt;标签 :class=&quot;&#123; class名1:变量1，class名2:变量2 &#125;&quot; /&gt;</code> 变量为一个布尔型</li><li>数组 <code>&lt;标签 :class=&quot;[变量1，变量2,&#39;class名1&#39;,&#39;class名2&#39;]&quot; /&gt;</code> 变量表示class名</li><li>属性 <code>&lt;标签 :class=&quot;条件 ？ &#39;class名1&#39;:&#39;class名2&#39; &quot; /&gt;</code> </li></ul><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><ul><li>对象 <code>&lt;标签 :style=&quot;&#123; css属性名1:变量1，css属性名2:变量2 &#125;&quot; /&gt;</code> 变量为css属性名</li><li>数组 <code>&lt;标签 :style=&quot;[变量1，变量2]&quot; /&gt;</code> 变量为表示style的对象</li><li>属性 <code>&lt;标签 style=&quot;font-size:20px;border-color:red&quot; /&gt;</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>JavsScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git基础知识</title>
    <link href="/2021/03/02/git/"/>
    <url>/2021/03/02/git/</url>
    
    <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>分布式版本管理工具</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>下载 <a href="https://git-scm.com/downloads">下载地址</a></p></li><li><p>检查安装是否成功 <code>git --version</code></p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="git基本状态"><a href="#git基本状态" class="headerlink" title="git基本状态"></a>git基本状态</h3><ul><li><p>文件状态</p><p>未修改、未跟踪、已修改、以暂存</p></li><li><p>git状态</p><p>已暂存、已提交、已修改</p></li></ul><h3 id="git基本配置"><a href="#git基本配置" class="headerlink" title="git基本配置"></a>git基本配置</h3><ul><li><p>配置全局用户名和邮箱</p><ul><li>配置用户名 <code>git config --global user.name &quot;用户名&quot;</code></li><li>配置邮箱 <code>git config --global user.email &quot;邮箱&quot;</code></li><li>检查全局配置 <code>git config --list --global</code></li></ul></li><li><p>基本命令</p><ul><li>初始化 <code>git init</code></li><li>检查文件状态 <code>git status</code></li><li>把未跟踪的文件添加到暂存区 <code>git add 文件名</code></li><li>把暂存区文件提交到git仓库 <code>git commit -m &quot;提交信息&quot;</code></li><li>把已修改文件还原为未修改状态 <code>git checkout -- 文件名</code></li><li>把暂存区的文件还原为未修改状态 <code>git reset HEAD 文件名</code></li><li>删除暂存区和工作区的文件 <code>git rm -f 文件名</code></li><li>把暂存区文件改为未跟踪状态 <code>git rm --cached 文件名</code></li><li>文件跨过暂存区直接提交到仓库 <code>git commit -a -m &quot;提交信息&quot;</code></li><li>设置忽略问文件添加<code>.gitignore</code> 文件</li></ul></li><li><p>远程仓库命令</p><ul><li><p>查看git提交历史 <code>git log</code></p><ul><li>查看最近的2条记录 <code>git log 2</code></li><li>一行显示 <code>git log --online</code></li><li>查看所有记录 <code>git reflog</code></li></ul></li><li><p>回退到指定版本 <code>git reset --hrad &quot;文件哈希值&quot;</code></p></li><li><p>新建远程仓库 <code>github/gitee </code>手动创建或者<code>new Resposity</code></p></li><li><p>配置ssh连接</p><ul><li>生成ssh密钥 <code>ssh-keygen -t rsa -b 4096 -C &quot;邮箱&quot;</code></li><li>添加公钥到github</li><li>检测配置是否成功 <code>ssh -T git@github.com</code></li></ul></li><li><p>本地仓库添加到远程仓库</p><ul><li>本地仓库和远程仓库关联：<code>git remote add origin 仓库地址</code></li><li>提交本地仓库到远程仓库：<code>git push -u origin master</code></li></ul></li><li><p>克隆远程仓库到本地  <code>git clone 仓库地址</code></p></li></ul><h3 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h3></li><li><p>查看所有分支 <code>git branch</code></p></li><li><p>新建分支 <code>git branch 新分支</code></p></li><li><p>切换到分支 <code>git checkout 分支名</code></p></li><li><p>新建并切换到新分支 <code>git checkout -b 新分支名</code></p></li><li><p>A分支合并B分支</p><ul><li>1、切换到A分支 <code>git checkout A </code></li><li>2、合并B分支 <code>git merge B</code></li></ul></li><li><p>删除分支</p><ul><li> <code>git branch -d </code>本地分支名</li><li> <code>git push origin --delete</code> 远程分支名</li></ul></li><li><p>重命名分支 <code>git branch -M 新名称</code></p></li><li><p>解决合并分支的冲突</p><ul><li>选择需要更改, 或手动去更改添加暂存区, 再去提交到本地仓库</li></ul></li><li><p>查看远程分支 <code>git remote show origin</code></p></li><li><p>拉取远程分支 <code>git pull</code></p></li><li><p>切换到远程分支 <code>git checkout 远程分支名</code></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Session和JSON Web Token</title>
    <link href="/2021/02/26/Session%20%E5%92%8C%20JSON%20Web%20Token/"/>
    <url>/2021/02/26/Session%20%E5%92%8C%20JSON%20Web%20Token/</url>
    
    <content type="html"><![CDATA[<h1 id="Session-和-JSON-Web-Token"><a href="#Session-和-JSON-Web-Token" class="headerlink" title="Session 和 JSON Web Token"></a>Session 和 JSON Web Token</h1><h2 id="Web开发模式"><a href="#Web开发模式" class="headerlink" title="Web开发模式"></a>Web开发模式</h2><h3 id="基于服务端渲染"><a href="#基于服务端渲染" class="headerlink" title="基于服务端渲染"></a>基于服务端渲染</h3><ul><li>服务端直接把数据动态拼接到 <code>HTML</code> 字符串中, 再把完整的 <code>HTML</code> 页面数据发送给客户端, 浏览器就可以直接渲染页面, 不需要进行 Ajax 请求的操作</li><li>优点<ul><li>前端渲染更快, 用户体验更好 (不需要首次等待 <code>Ajax </code>发送请求的过程)</li><li>有利于 <code>SEO </code>搜索引擎读取权重词汇 (服务端响应的是完整带标签的 <code>HTML</code> 内容, 百度等爬虫更容器读取信息)</li></ul></li><li>缺点<ul><li>需要额外的服务器资源, 以及完善的运维体系去管理</li><li>不利于前后端分离, 由页面是在服务端进行输出的, 需要前端的代码和 <code>Node.js</code> 服务端部署在一起</li></ul></li></ul><h3 id="基于客户端渲染"><a href="#基于客户端渲染" class="headerlink" title="基于客户端渲染"></a>基于客户端渲染</h3><ul><li>依赖于 <code>Ajax</code> 技术的广泛运用, 后端只负责提供 <code>API </code>接口, 前端使用 <code>Ajax</code> 调用接口渲染页面的开发模式</li><li>优点<ul><li>开发体验好, 各司其职, 效率更高</li><li>用户体验好, <code>Ajax</code> 可以在不刷新页面的情况下实现局部更新</li><li>减轻服务端的渲染压力, 页面最终是在用户的浏览器中生成的</li></ul></li><li>缺点<ul><li>前端渲染耗时, 首屏渲染的体验度不高</li><li>不利于 <code>SEO </code>搜索引擎优化</li></ul></li></ul><h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><ul><li><p>通过一系列手段完成用户身份验证, 网站的内容如果涉及到隐私性, 安全性和交易性, 需要身份认证的机制来确保安全</p></li><li><p>验证方式</p><ul><li>服务端渲染推荐 <code>Session</code></li><li>客户端渲染推荐 <code>JSON Web Token</code></li></ul></li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li><p>概述</p><p>Cookie是存储在用户浏览器大小不超过 4kb 的特殊字符串</p></li><li><p>组成</p><p>一个名称(Name) 和 值(Value) 以及其他几个用于控制 Cookie 有效期, 安全性, 使用范围的可选属性组成</p></li><li><p>作用</p><p>不用域名下的 <code>Cookie </code>信息是独立的, 每当客户端发送请求时, 会自动把当前域名下所有未过期的 <code>Cookie</code>添加到请求头, 一同发送到服务器</p></li><li><p>特点</p><ul><li>自动发送</li><li>域名独立</li><li>过期时限</li><li>4KB 限制</li></ul></li><li><p>机制</p><p>浏览器第一次发送请求到服务器, 服务器会以响应头的形式向浏览器写入 <code>Cookie </code>保存, 之后浏览器每次发送请求到服务器都会自动将<code>Cookie</code>以请求头的形式发送过去</p></li><li><p>缺点</p><ul><li><code>Cookie</code> 是存储在浏览器端的, 并且浏览器本身提供了读写 Cookie 的方法, 因此 <code>Cookie</code> 信息很容易被窃取和伪造</li><li><code>SessionID</code> 需要借助 <code>cookie</code> 手段存放在浏览器, 当涉及到前端跨域请求后端接口的时候, 需要做额外的配置,才能实现 <code>Session</code> 的认证</li></ul></li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p> 使用 <code>Session</code> 方案, 用户的状态信息在服务器生成和存储, 浏览器只负责保留一个 <code>sessionID</code> 秘钥, 每次发送请求时携带这个 <code>sessionID</code> 到服务器, 服务器根据这个唯一的 <code>id</code>值查询对应的用户信息然后进行返回</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>使用<code>express-session</code>模块处理<code>cookie</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入 express 模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-comment">//导入 express-session模块处理cookie</span><br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>);<br><span class="hljs-comment">// 创建 express 的服务器实例</span><br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">// 配置 Session 中间件</span><br>app.use(session(&#123;<br>  secret: <span class="hljs-string">&#x27;keyboard cat&#x27;</span>,<br>  resave: <span class="hljs-literal">false</span>,<br>  saveUninitialized: <span class="hljs-literal">true</span><br>&#125;));<br><span class="hljs-comment">// 托管静态页面</span><br>app.use(express.static(<span class="hljs-string">&#x27;./pages&#x27;</span>));<br><span class="hljs-comment">// 解析 POST 提交过来的表单数据</span><br>app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br><span class="hljs-comment">// 登录的 API 接口</span><br>app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 判断用户提交的登录信息是否正确</span><br>  <span class="hljs-keyword">if</span> (req.body.username !== <span class="hljs-string">&#x27;admin&#x27;</span> || req.body.password !== <span class="hljs-string">&#x27;000000&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span> &#125;);<br>  &#125;<br>  <span class="hljs-comment">// 登录成功后的用户信息，保存到 Session 中</span><br>  req.session.user = req.body;<br>  req.session.isLogin = <span class="hljs-literal">true</span>;<br>  res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span> &#125;)<br>&#125;);<br><span class="hljs-comment">// 获取用户姓名的接口</span><br>app.get(<span class="hljs-string">&#x27;/api/username&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(req.session.isLogin)<br>  <span class="hljs-comment">// 从 Session 中获取用户的名称，响应给客户端</span><br>  <span class="hljs-keyword">if</span> (!req.session.isLogin) &#123;<br>    <span class="hljs-keyword">return</span> res.send(&#123;<br>      status: <span class="hljs-number">1</span>,<br>      message: <span class="hljs-string">&quot;没有登录&quot;</span><br>    &#125;);<br>  &#125;<br>  res.send(&#123;<br>    status: <span class="hljs-number">0</span>,<br>    message: <span class="hljs-string">&quot;获取用户名成功&quot;</span>,<br>    username: req.session.user.username<br>  &#125;);<br>&#125;);<br><span class="hljs-comment">// 退出登录的接口</span><br>app.post(<span class="hljs-string">&#x27;/api/logout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 清空 Session 信息</span><br>  req.session.destroy();<br>  res.send(&#123;<br>    status: <span class="hljs-number">0</span>,<br>    message: <span class="hljs-string">&quot;退出成功&quot;</span><br>  &#125;);<br>&#125;);<br><span class="hljs-comment">// 调用 app.listen 方法，指定端口号并启动web服务器</span><br>app.listen(<span class="hljs-number">80</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Express server running at http://127.0.0.1:80&#x27;</span>)<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="JSON-Web-Token"><a href="#JSON-Web-Token" class="headerlink" title="JSON Web Token"></a>JSON Web Token</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>当前端跨域请求后端接口时, <code>Session</code> 认证存在局限性, <code>JWT</code> 认证方式,没有和 <code>Cookie</code> 存在绑定关系,基于<code>token</code>的鉴权机制, <code>JWT</code>是前端目前最流行的跨域认证解决方案</p><h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><p>用户信息通过加密签名后 <code>token</code> 字符串的形式, 保存在客户端浏览器中,服务器通过解密客户端传来的 <code>token</code> 字符串来认证用户的身份</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>通常由三部分组成, 使用英文符号.进行分隔: Header.Payload.Signature</p><ul><li><p>Header: 头部</p></li><li><p>Payload: 有效荷载, 这里存放的是经过加密后的用户信息</p></li><li><p>Signature: 签名</p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>服务端签发 <code>TOKEN</code> 到客户端后, 存储到 <code>localStorage</code> 中, 每次发送请求前带上 <code>TOKEN</code>, 放在<code>HTTP </code>请求头的 <code>Authorization </code>字段中 </p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>Session</tag>
      
      <tag>Cookie</tag>
      
      <tag>JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js中操作MySQL</title>
    <link href="/2021/02/26/Node%E4%B8%AD%E6%93%8D%E4%BD%9CMySQL/"/>
    <url>/2021/02/26/Node%E4%B8%AD%E6%93%8D%E4%BD%9CMySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="Node中操作MySQL"><a href="#Node中操作MySQL" class="headerlink" title="Node中操作MySQL"></a>Node中操作MySQL</h1><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 1.导入mysql模块 */</span><br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>);<br><br><span class="hljs-comment">/* 2.创建连接池 */</span><br><span class="hljs-keyword">const</span> db = mysql.createPool(&#123;<br>    host: <span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-comment">//连接的数据库域名</span><br>    user: <span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-comment">//用户名</span><br>    password: <span class="hljs-string">&quot;admin123&quot;</span>,<span class="hljs-comment">//密码</span><br>    database: <span class="hljs-string">&quot;my_db&quot;</span><span class="hljs-comment">//数据库名称</span><br>&#125;);<br><br><span class="hljs-comment">/* 3.连接数据库,执行sql select查询数据 */</span><br>db.query(<span class="hljs-string">&quot;select * from users&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//发生错误</span><br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;发生未知错误&quot;</span> + err.message);;<br>    &#125;<br>    <span class="hljs-comment">//返回一个数组结果</span><br>    <span class="hljs-built_in">console</span>.log(results);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h2><h3 id="insert插入数据"><a href="#insert插入数据" class="headerlink" title="insert插入数据"></a><code>insert</code>插入数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 3.执行 insert 插入数据 */</span><br><span class="hljs-comment">//待插入的数据</span><br><span class="hljs-keyword">const</span> user = &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;wangxiaoming&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;password&quot;</span> &#125;;<br><span class="hljs-comment">// sql语句, ? 表示占位符</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">&quot;insert into users (username,password) values (?,?)&quot;</span>;<br><span class="hljs-comment">//执行sql</span><br>db.query(sql, [user.username, user.password], <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;发生未知错误&quot;</span> + err.message);<br>    &#125;<br>    <span class="hljs-comment">//影响的行数为 1</span><br>    <span class="hljs-keyword">if</span> (results.affectedRows === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;新增一条数据成功&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="insert插入数据快捷语法"><a href="#insert插入数据快捷语法" class="headerlink" title="insert插入数据快捷语法"></a><code>insert</code>插入数据快捷语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 3.执行 insert 插入数据 */</span><br><span class="hljs-comment">//待插入的数据</span><br><span class="hljs-keyword">const</span> user = &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;xiaozhang&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;paw&quot;</span> &#125;;<br><span class="hljs-comment">//sql语句 set后面使用 ? 快捷语法</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">&quot;insert into users set ?&quot;</span>;<br><span class="hljs-comment">//user替换set后的 ? 形成快捷语法</span><br>db.query(sql, user, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;发生未知错误&quot;</span> + err.message);<br>    &#125;<br>    <span class="hljs-comment">//影响的行数为 1</span><br>    <span class="hljs-keyword">if</span> (results.affectedRows === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;新增一条数据成功&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="update更新数据"><a href="#update更新数据" class="headerlink" title="update更新数据"></a><code>update</code>更新数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 3.执行 update 更新数据 */</span><br><span class="hljs-comment">//待插入的数据</span><br><span class="hljs-keyword">const</span> user = &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;xiaozhang&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;paw123&quot;</span> &#125;;<br><span class="hljs-comment">//sql语句 ? 为占位符</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">&quot;update users set password=? where username=?&quot;</span>;<br><span class="hljs-comment">//执行sql</span><br>db.query(sql, [user.password, user.username], <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;发生未知错误&quot;</span> + err.message);<br>    &#125;<br>    <span class="hljs-comment">//影响的行数为 1</span><br>    <span class="hljs-keyword">if</span> (results.affectedRows === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;修改一条数据成功&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="update更新数据快捷方式"><a href="#update更新数据快捷方式" class="headerlink" title="update更新数据快捷方式"></a><code>update</code>更新数据快捷方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 3.执行 update 更新数据 */</span><br><span class="hljs-comment">//待插入的数据</span><br><span class="hljs-keyword">const</span> user = &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;xiaoli&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;pd123123&quot;</span> &#125;;<br><span class="hljs-comment">//sql语句 ? 为占位符</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">&quot;update users set ? where id=?&quot;</span>;<br><span class="hljs-comment">//执行sql,[user,15]替换 ?,形成快捷语法</span><br>db.query(sql, [user, <span class="hljs-number">15</span>], <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;发生未知错误&quot;</span> + err.message);<br>    &#125;<br>    <span class="hljs-comment">//影响的行数为 1</span><br>    <span class="hljs-keyword">if</span> (results.affectedRows === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;修改一条数据成功&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="delete删除数据"><a href="#delete删除数据" class="headerlink" title="delete删除数据"></a><code>delete</code>删除数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* delete删除语句 */</span><br><span class="hljs-comment">//sql语句</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">&quot;delete from users where id=?&quot;</span>;<br><span class="hljs-comment">//执行sql</span><br>db.query(sql, <span class="hljs-number">16</span>, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;发生未知错误&quot;</span> + err.message);<br>    &#125;<br>    <span class="hljs-comment">//影响的行数为 1</span><br>    <span class="hljs-keyword">if</span> (results.affectedRows === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;成功删除一条数据&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="update标记删除"><a href="#update标记删除" class="headerlink" title="update标记删除"></a><code>update</code>标记删除</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* delete删除非常危险使用update标记删除的数据 */</span><br><span class="hljs-comment">//sql语句</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">&quot;update users set status=? where id&gt;?&quot;</span>;<br><span class="hljs-comment">//执行sql</span><br>db.query(sql, [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>], <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;发生未知错误&quot;</span> + err.message);<br>    &#125;<br>    <span class="hljs-comment">//影响的行数为 1</span><br>    <span class="hljs-keyword">if</span> (results.affectedRows &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;成功标记删除了&quot;</span> + results.affectedRows + <span class="hljs-string">&quot;数据&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基础知识</title>
    <link href="/2021/02/25/MySQL/"/>
    <url>/2021/02/25/MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库 (database) 是专门用来组织, 存储和管理数据的仓库</p><h2 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h2><ul><li> 数据库 (database),</li><li>数据表(table),</li><li>数据行(row),</li><li>字段(field)</li></ul><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>SQL 的全称是 Structured Query Language, 即结构化的查询语言, 专门用来访问和处理数据库的编程语言</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>可以实现数据库中所有的增删改查操作</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>查询数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 从指定表中查出所有列的数据</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名称<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users<br><span class="hljs-comment">-- 查询指定列的数据</span><br><span class="hljs-keyword">SELECT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> users<br></code></pre></td></tr></table></figure><ul><li>添加数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 向指定的数据表中插入一条数据</span><br><span class="hljs-comment">-- 多个列和值之间使用逗号隔开, 列和值的顺序要保持一致</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名称(列<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span>, ...) <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users (username,password) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;wln&#x27;</span>,&quot;100100&quot;)<br></code></pre></td></tr></table></figure><ul><li>修改数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 更新数据表中的某一列或多列数据</span><br><span class="hljs-keyword">UPDATE</span> 表名称 <span class="hljs-keyword">SET</span> 列<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span> <span class="hljs-keyword">WHERE</span> 列名称<span class="hljs-operator">=</span>值<br><span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;ILoveYou&#x27;</span>,status<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;ls&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除数据表中的某一行或多行数据</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列名称<span class="hljs-operator">=</span>值<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;zs&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>where子句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 有条件的从表中选取数据</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列名称 运算符 值<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>AND和OR</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在 WHERE 子句中把多个条件结合起来, AND 表示并且, OR 表示或者的意思</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列名称 运算符 值<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">&gt;</span><span class="hljs-number">4</span> <span class="hljs-keyword">and</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xk&#x27;</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">&lt;</span><span class="hljs-number">4</span> <span class="hljs-keyword">or</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;x%&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>ORDER BY</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- SELECT 列名称 FROM 表名称 ORDER BY 列名称 DESC</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> status <span class="hljs-keyword">DESC</span><br><span class="hljs-comment">-- 多重排序规则</span><br><span class="hljs-keyword">SELECT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 列名称 [排序规则],  列名称 [排序规则]<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> status <span class="hljs-keyword">asc</span>, username <span class="hljs-keyword">desc</span><br><span class="hljs-comment">-- 同时使用 ORDER BY 和 WHERE子句时, ORDER BY 位于 WHERE 之后</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">&gt;</span><span class="hljs-number">4</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> username <span class="hljs-keyword">desc</span><br></code></pre></td></tr></table></figure><ul><li>COUNT</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 可以返回匹配指定条件的行数</span><br><span class="hljs-comment">-- SELECT COUNT(*) FROM 表名称</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">&gt;</span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><ul><li>AS<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 给查询出来的用户起一个别名</span><br><span class="hljs-comment">-- SELECT username As name FROM users</span><br><span class="hljs-keyword">select</span> username <span class="hljs-keyword">as</span> name <span class="hljs-keyword">from</span> users<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express</title>
    <link href="/2021/02/24/Express/"/>
    <url>/2021/02/24/Express/</url>
    
    <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>express是基于Node.js的Web服务开发框架，本质为第三方npm包</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>开发Web网站服务器</li><li>API接口服务器</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm i express</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>基本使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-comment">//创建express服务实例</span><br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">//开启服务,监听端口</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务正在运行: http://localhost:3006&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>监听请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-comment">//创建服务对象</span><br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">//监听get请求</span><br>app.get(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李明&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span> &#125;);<br>&#125;);<br><span class="hljs-comment">//监听post请求</span><br>app.post(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&quot;请求成功!&quot;</span>);<br>&#125;);<br><span class="hljs-comment">//开启服务,监听端口</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务正在运行: http://localhost:3006&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>获取查询参数 <code>req.query</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-comment">//创建服务对象</span><br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">//监听get请求</span><br>app.get(<span class="hljs-string">&quot;/info&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//获取参数</span><br>    res.send(req.query);<br>&#125;);<br><span class="hljs-comment">//开启服务,监听端口</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务正在运行: http://localhost:3006/info&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>获取动态参数 <code>req.params</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-comment">//创建服务对象</span><br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">//监听get请求</span><br>app.get(<span class="hljs-string">&quot;/:id/:name&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//获取动态参数</span><br>    res.send(req.params.id);<br>    res.send(req.params.name);<br>&#125;);<br><span class="hljs-comment">//开启服务,监听端口</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务正在运行: http://localhost:3006/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>路由在广义上理解就是指一种映射关系，在 node.js 中指的是客户端的请求和服务端处理函数的映射关系，Express 路由包括 3 部分: 请求的 URL，请求的类型，处理函数</p><ul><li>路由模块 <code>express.Router</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-comment">//创建路由服务对象</span><br><span class="hljs-keyword">const</span> router = express.Router();<br><span class="hljs-comment">//注册路由</span><br>router.get(<span class="hljs-string">&quot;/name&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&quot;name&quot;</span>);<br>&#125;);<br>router.post(<span class="hljs-string">&quot;/api&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&quot;api&quot;</span>);<br>&#125;);<br><span class="hljs-comment">//暴露路由</span><br><span class="hljs-built_in">module</span>.exports = router;<br></code></pre></td></tr></table></figure><ul><li>使用路由 <code>app.use(router)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-comment">//自定义路由模块</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./创建路由模块&quot;</span>);<br><span class="hljs-comment">//创建服务对象</span><br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">//使用路由</span><br>app.use(router);<br><span class="hljs-comment">//开启服务,监听端口</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务正在运行: http://localhost:3006/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><ul><li><p>Express 的中间件即是指响应数据的中间环节，本质上是一个处理函数</p></li><li><p>参数</p><ul><li>req 请求对象</li><li>res 响应对象</li><li>next 回调函数，一个中间件函数内必须调用<code>next()</code>将控制权传递给下一个中间件功能，否则该请求将被挂起</li></ul></li><li><p>分类</p><ul><li><p>官方中间件</p><ul><li><code>expres.static</code>  托管静态资源</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-comment">//导入path</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-comment">//创建服务对象</span><br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">//托管静态资源</span><br>app.use(<span class="hljs-string">&quot;/public&quot;</span>, express.static(path.join(__dirname, <span class="hljs-string">&quot;../../../../前端项目/bigEvent&quot;</span>)));<br><span class="hljs-comment">//开启服务,监听端口</span><br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务正在运行: http://localhost:3006/public/login.html&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p><code>express.urlencoded(&#123;extended:false&#125;)</code> 解析post请求的application/x-www-form-urlencoded请求的参数</p></li><li><p><code>express.json()</code> 解析post请求的application/json请求的参数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">//内置中间件,解析post发送的json参数</span><br>app.use(express.json());<br><span class="hljs-comment">//解析post请求的urlencoded发送的参数</span><br>app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br>app.post(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(req.body);<br>&#125;);<br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务已开启: http://localhost:3006/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>第三方中间件<ul><li><code>body-parser</code> 解析请求参数</li><li><code>cors</code> 服务端解决跨域本质为设置 HTTP 响应头：Access-Control-Allow-Origin: *</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> app = express();<br><span class="hljs-comment">//导入cors</span><br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>);<br><span class="hljs-comment">//cors中间件解决跨域问题</span><br>app.use(cors());<br>app.post(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(req.body);<br>&#125;);<br>app.listen(<span class="hljs-number">3006</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务已开启: http://localhost:3006/&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>自定义中间件</p><ul><li><code>(err,req,res,next)=&gt;&#123;&#125;</code> 错误处理中间件，放在其他中间件和路由之后</li><li><code>app.use(req,res,next)=&gt;&#123;&#125;</code> 全局中间件</li><li><code>app.get(req,res,next)=&gt;&#123;&#125;</code> 局部中间件</li></ul></li><li><p>多个中间件使用顺序</p><ol><li>cors和内置中间件</li><li>路由中间件</li><li>错误处理中间件</li></ol></li></ul><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>(Cross-Origin Resource Sharing) 跨域资源共享, 由一系列的 HTTP 响应头组成, 这些响应头决定了浏览器是否阻止前端 js 代码发出跨域请求</p><ul><li>响应头<ul><li><code>Access-Control-Allow-Origin: url/* </code>  指定了允许访问该资源的url</li><li><code>Access-Control-Allow-Headers: a, b, c </code> 指定了允许发送哪些请求头</li><li><code>Access-Control-Allow-Methods: GET, POST</code> 指定了允许发送何种类型的请求</li></ul></li><li>请求分类<ul><li>简单请求<ul><li>请求方式为 <code>GET/POST/HEAD </code>之一</li><li>无自定义请求头字段</li></ul></li><li>预检请求<ul><li>请求方式不为 <code>GET/POST/HEAD</code> 之一;</li><li>存在自定义请求头字段;</li><li>发送了 application/json 格式数据</li></ul></li><li>区别<ul><li>预检请求时浏览器会先发送一个 <code>OPTIONS </code>请求进行预检, 以确认服务器是否允许该实际请求, 完成后再发送真正的请求</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>Node.js</tag>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js基础知识</title>
    <link href="/2021/02/22/Node.js/"/>
    <url>/2021/02/22/Node.js/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</li><li>Node.js 是 JavaScript 的后端运行环境。</li><li>Node.js 中无法调用 DOM 和 BOM 等浏览器内置 API。</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>基于 Express 框架（<a href="http://www.expressjs.com.cn/">http://www.expressjs.com.cn/</a>) 可以快速构建 Web 应用。</li><li>基于 Electron 框架（<a href="https://electronjs.org/">https://electronjs.org/</a>) 可以构建跨平台的桌面应用。</li><li>基于 restify 框架（<a href="http://restify.com/">http://restify.com/</a>) 可以快速构建 API 接口项目。</li><li>读写和操作数据库、创建实用的命令行工具辅助前端开发。</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>事件驱动编程</li><li>非阻塞异步I/O处理</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>打开官网的安装页 (<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a>), 下载对应操作系统的安装包。</li><li>在终端执行 <code>node -v / node --version</code> 命令检查是否安装成功。</li></ul><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>在终端使用＂node 文件路径＂运行JS文件</li><li>常用终端命令<ul><li>使用<code>↑</code> 箭头可以直接返回上一条运行的命令</li><li>使用 <code>Tab</code> 可以快速补全剩下的文件路径</li><li>使用 <code>CTRL + U </code>可以清空当前输入的命令</li><li>使用<code> clear</code> 可以清空可视区命令</li></ul></li></ul><h2 id="模块及模块化"><a href="#模块及模块化" class="headerlink" title="模块及模块化"></a>模块及模块化</h2><ul><li><p>模块化是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元。</p></li><li><p>模块化好处</p><ul><li> 提高了代码的复用性。</li><li> 提高了代码的可维护性。</li><li>可以实现按需加载。</li></ul></li><li><p>分类</p><ul><li>内置模块 （内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）。</li><li>自定义模块 （用户创建的每个 .js 文件，都是自定义模块）。</li><li>第三方模块 （由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）。</li></ul></li><li><p>加载模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> 变量 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;模块名&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>模块作用域</p><ul><li>类似函数作用域，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域。</li></ul></li><li><p>module</p><ul><li>概述：在每个自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息。</li><li>module.exports 对象：在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用。外界用 require() 方法导入自定义模块时，得到的就是 module.exports 所指向的对象。</li><li>exports：为了简化向外共享成员的代码，Node 提供了 exports 对象。默认情况下，exports 和 module.exports 指向同一个对象。最终共享的结果，还是以 module.exports 指向的对象为准。</li></ul></li><li><p>commonJS</p><ul><li>Node.js 遵循了 CommonJS 模块化规范，CommonJS 规定了模块的特性和各模块之间如何相互依赖。</li><li>规定<ul><li>每个模块内部，module 变量代表当前模块。</li><li>module 变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口。</li><li>加载某个模块，其实是加载该模块的 module.exports 属性。require() 方法用于加载模块。</li></ul></li></ul></li></ul><h2 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h2><h3 id="缓存加载"><a href="#缓存加载" class="headerlink" title="缓存加载"></a>缓存加载</h3><ul><li>  模块在第一次加载后会被缓存, 如果每次调用 require(‘foo’) 都解析到同一文件，则返回相同的对象,不会导致模块的代码被执行多次。</li><li>  不论是 node.js 内置的核心模块，用户自定义的模块还是第三方模块，都有对应的缓存策略，提升模块的加载效率。</li></ul><h3 id="内置模块加载机制"><a href="#内置模块加载机制" class="headerlink" title="内置模块加载机制"></a>内置模块加载机制</h3><ul><li>require() 总是会优先加载核心模块, 比如 require(‘http’) 始终返回内置的 HTTP 模块，即使有同名文件。</li></ul><h3 id="自定义模块加载机制"><a href="#自定义模块加载机制" class="headerlink" title="自定义模块加载机制"></a>自定义模块加载机制</h3><ul><li>必须指定’/‘、 ‘./‘ 或 ‘../‘ 开头的路径。</li><li>如果按确切的文件名没有找到模块，则 Node.js 会尝试带上 .js、 .json 或 .node 拓展名再加载。</li></ul><h3 id="第三方模块加载机制"><a href="#第三方模块加载机制" class="headerlink" title="第三方模块加载机制"></a>第三方模块加载机制</h3><ul><li>Node.js 会从当前模块的父目录开始，尝试从它的 /node_modules 目录里加载模块。如果还是没有找到，则移动到再上一层父目录，直到文件系统的根目录。</li></ul><h2 id="Node包"><a href="#Node包" class="headerlink" title="Node包"></a>Node包</h2><ul><li>Node.js 中的第三方模块又叫做包。</li><li>包是基于内置模块封装出来的，提供了更高级、更方便的 API，极大的提高了开发效率。</li><li> <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> ，它是全球最大的包共享平台，网站上搜索自己所需要的包。</li><li> <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a> ，可以从服务器上下载所需要的包。</li><li>分类<ul><li>项目包：被安装到项目的 node_modules 目录中的包，只能在当前项目下进行使用<ul><li>核心依赖包：线上环境使用的包配置在package.json的dependencies中，安装使用<code>npm i 包名称</code></li><li>开发依赖包：开发环境使用的包配置在package.json的devDependencies中，安装使用<code>npm i 包名称 -D/--save-dev</code></li></ul></li><li>全局包：被下载到node安装位置的node_modules下的包<ul><li>安装 <code>npm i 包名称 -g</code></li><li>卸载 <code>npm uninstall 包名称 -g</code></li></ul></li></ul></li><li>自定义包<ul><li>必须以单独的目录存在</li><li>包的根目录下必须包含 package.json 配置文件</li><li>package.json 这个配置文件必须包含 name, version, main 三个属性, 分别代表包的名称，版本和包的入口。</li></ul></li><li>包的发布<ul><li>编写包的说明文档 在包的根目录下添加文件 README.md 文件</li><li>注册一个 npm 账号。</li><li>pc端打开注册邮箱进行确认</li><li>在包的发布目录执行命令 <code>npm publish</code></li><li>删除已经发布的包 <code>npm unpublish 包名称 --force</code></li></ul></li></ul><h2 id="npm-Node包管理工具"><a href="#npm-Node包管理工具" class="headerlink" title="npm(Node包管理工具)"></a>npm(Node包管理工具)</h2><ul><li> npm：全称 Node Package Manager（简称 npm 包管理工具），这个包管理工具随着 Node.js 的安装包一起被安装到了用户的电脑上。</li><li>常用命令<ul><li><code>npm -v</code> 检查npm版本</li><li><code>npm i 包名称/nmp install 包名称</code> 用来安装指定包</li><li><code>npm install 包名称@版本号</code> 安装指定版本</li><li><code>npm view 包名称</code> 查看包的详细信息</li><li><code>npm init -y</code> 创建包管理配置文件package.json文件</li><li><code>npm uninstall 包名称</code> 卸载包</li><li><code>npm i --save--dev/-D 包名称</code> 安装开发测试阶段用到的包</li><li><code>npm config set registry=https://registry.npm.taobao.org</code> 更换淘宝源</li><li><code>npm config get registry</code> 检查源</li><li><code>npm i nrm -g</code> 全局安装nrm</li><li><code>nrm ls</code>查看源列表</li><li><code>nrm use 源名称</code> 切换到指定源</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax基础知识</title>
    <link href="/2021/02/09/Ajax/"/>
    <url>/2021/02/09/Ajax/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>全称：异步JS和XML</li><li>作用：客户端和服务器之间的通信</li><li>特点：异步</li></ul><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><ul><li>统一资源定位符，互联网资源位置，标识唯一资源</li><li>编码 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&quot;字符&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>解码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">decodeURI</span>(<span class="hljs-string">&quot;code&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul><li>概述<ul><li>javascript对象表示法</li></ul></li><li>作用<ul><li> 一种轻量级数据交换格式，用于客户端和服务端之间进行数据传输</li></ul></li><li>序列化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">JSON</span>.stringify(对象)<br></code></pre></td></tr></table></figure><ul><li>反序列化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">JSON</span>.parse(json字符串)<br></code></pre></td></tr></table></figure><h1 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h1><ul><li><p>概述</p><ul><li>浏览器内置对象，用于和服务器之间交互</li></ul></li><li><p>get</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr=<span class="hljs-keyword">new</span> XMLHttpRequest();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.open(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.send();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.addEventListener(<span class="hljs-string">&quot;readystatechange&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.readyState === <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-built_in">this</span>.status === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.responseText);<br>      &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure></li><li><p>post</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr=<span class="hljs-keyword">new</span> XMLHttpRequest();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.open(<span class="hljs-string">&quot;post&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.send(参数);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.addEventListener(<span class="hljs-string">&quot;readystatechange&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.readyState === <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-built_in">this</span>.status === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.responseText);<br>      &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><h1 id="XMLHttpRequest新特性"><a href="#XMLHttpRequest新特性" class="headerlink" title="XMLHttpRequest新特性"></a>XMLHttpRequest新特性</h1></li><li><p>请求超时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.timeout=超时时间<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.ontimeout=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//...&#125;; //超时事件</span><br></code></pre></td></tr></table></figure></li><li><p>FormData</p><ul><li><p>作用：管理表单数据</p></li><li><p>实例FormData对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fd=<span class="hljs-keyword">new</span> FormData()<br></code></pre></td></tr></table></figure></li><li><p>数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fd.get(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);  <span class="hljs-comment">//获取数据</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fd.append(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);  <span class="hljs-comment">//添加数据</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fd.forEach();  <span class="hljs-comment">//遍历数据</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fd.set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);  <span class="hljs-comment">//设置数据</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>上传文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> files = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;form&quot;</span>).files;  <span class="hljs-comment">//获取文件列表</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//实例化FormData，添加文件数据</span><br><span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> FormData();<br>fd.append(<span class="hljs-string">&quot;name&quot;</span>,files[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Ajax请求</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>xhr.open(<span class="hljs-string">&quot;post&quot;</span>,url);<br>xhr.send(fd);<br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//...&#125;;</span><br></code></pre></td></tr></table></figure></li><li><p>显示文件上传进度</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.upload.onprogress=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-comment">//文件可计算</span><br>       <span class="hljs-keyword">if</span>(e.lengthComputable)&#123;<br>      <span class="hljs-comment">//文件已上传大小</span><br>     e.loaded<br>      <span class="hljs-comment">//文件总大小</span><br>      e.total<br>&#125;&#125;;<br></code></pre></td></tr></table></figure><ul><li>JQuery文件上传</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>          url: <span class="hljs-string">&quot;http://www.liulongbin.top:3006/api/upload/avatar&quot;</span>,<br>          method: <span class="hljs-string">&quot;post&quot;</span>,<br>          data: fd,<br>          beforeSend: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&quot;#loading&quot;</span>).show();<br>          &#125;,<br>          <span class="hljs-comment">// 设置编码multipart/form-data</span><br>          contentType: <span class="hljs-literal">false</span>,<br>          <span class="hljs-comment">// 不需要处理数据</span><br>          processData: <span class="hljs-literal">false</span>,<br>          success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(res);<br>            $(<span class="hljs-string">&quot;#loading&quot;</span>).prop(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;http://www.liulongbin.top:3006&quot;</span> + res.url);<br>          &#125;<br>        &#125;);<br><span class="hljs-comment">// 主要设置contentType:false和processData:false</span><br></code></pre></td></tr></table></figure><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><ul><li>概述<ul><li>一个专门处理数据请求的插件库</li></ul></li><li>get</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.get(<span class="hljs-string">&quot;url&quot;</span>, &#123;<br>   params: &#123;<br>     name: <span class="hljs-string">&quot;letian&quot;</span>,<br>     age: <span class="hljs-number">20</span>,<br>   &#125;<br> &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(result);<br> &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(error);<br> &#125;);<br></code></pre></td></tr></table></figure><ul><li>post</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.post(<span class="hljs-string">&quot;url&quot;</span>, &#123;<br>  name: <span class="hljs-string">&quot;letian&quot;</span>,<br>  age: <span class="hljs-number">20</span>,<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(result);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(error);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>综合</p><ul><li> get</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios(&#123;<br>        url: <span class="hljs-string">&quot;url&quot;</span>,<br>        method: <span class="hljs-string">&quot;get&quot;</span>,<br>        params: &#123;<br>          id: <span class="hljs-number">1</span><br>        &#125;<br>      &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(result);<br>      &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(error);<br>      &#125;);<br></code></pre></td></tr></table></figure><ul><li>post</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios(&#123;<br>  url: <span class="hljs-string">&quot;http://www.liulongbin.top:3006/api/addbook&quot;</span>,<br>  method: <span class="hljs-string">&quot;post&quot;</span>,<br>  data: <br>    name: <span class="hljs-string">&quot;value&quot;</span><br>  &#125;<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(res);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(error);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h1 id="数据请求方式"><a href="#数据请求方式" class="headerlink" title="数据请求方式"></a>数据请求方式</h1><ul><li>get 多用于数据请求</li><li>post 多用于数据提交</li><li>异同点<ul><li>1、get 数据存放于url中，post数据存放于请求体中，相对安全</li><li>2、get请求会缓存到浏览器中，post请求不会缓存到浏览器</li><li>3、get请求有长度限制，post请求数据量大，可以是二进制数据</li></ul></li></ul><h1 id="JQ中的Ajax方法"><a href="#JQ中的Ajax方法" class="headerlink" title="JQ中的Ajax方法"></a>JQ中的Ajax方法</h1><ul><li>get</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.get(url,data,fn())<br></code></pre></td></tr></table></figure><ul><li>post</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.post(url,data,fn())<br></code></pre></td></tr></table></figure><ul><li>get和post</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&quot;url&quot;</span>,<span class="hljs-attr">method</span>:<span class="hljs-string">&quot;method&quot;</span>,<span class="hljs-attr">data</span>:&#123;data&#125;,fn()&#125;)<br></code></pre></td></tr></table></figure><ul><li>参数含义<ul><li>url 数据接口，即url地址</li><li>data 提交的数据</li><li>fn 回调函数</li><li>method 请求方式</li></ul></li></ul><h1 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h1><ul><li>属性<ul><li>action 表单数据提交的位置，即一个url地址</li><li>target 何处打开，_self当前页打开，_blank新的标签页打开</li><li>method 提交的方式get和post</li><li>enctype编码方式<ul><li>application/x-www-form-urlencoded 表示在发送前编码所有的字符</li><li>multipart/form-data 不对字符进行编码, 在传输文件时必须使用这个值</li><li>text/plain 空格转成 + 号, 不对特殊字符进行编码 (少用)</li></ul></li></ul></li><li>同步提交<ul><li>问题：会刷新页面，导致之前的数据丢失</li><li>解决方案：采用Ajax请求数据，表单只负责采集数据</li></ul></li><li>Ajax提交数据<ul><li>使用JQ的submit方法，提交表单数据</li><li>e.preventDefault() 取消表单默认跳转事件</li><li>document.querySelect(“form“).reset() 重置表单，reset为jS原生方法，需要原生js调用</li><li>JQ.serialize() 获取表单的所有数据组成的字符串,表单必须要有name属性</li></ul></li></ul><h1 id="同源跨域"><a href="#同源跨域" class="headerlink" title="同源跨域"></a>同源跨域</h1><ul><li>同源：两个url协议、域名和端口一样的url</li><li>同源策略：浏览器的一种安全策略，限制一个网站与另一个非同源网站资源交互</li><li>跨域：一个网站访问另一个非同源的网站资源</li><li>跨域请求的方式<ul><li>JSONP 方案: 利用跨域标签的特性发送 GET 请求获取数据 (缺点: 只能支持 GET 请求)</li><li> CORS 方案: 服务端处理跨域的一种技术手段, 开发中最为常用</li><li>代理服务器方案: 前端在本地开发的常用方案, 后面会学习专门的插件</li><li>手动关闭浏览器的同源策略: 不推荐使用, 安全性很差</li></ul></li><li>jsonp：通过script标签跨域数据请求</li><li>JQ的jsonp</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>      url: <span class="hljs-string">&quot;url&quot;</span>,<br>      data: &#123;<br>        name: <span class="hljs-string">&quot;letian&quot;</span><br>      &#125;,<br>      dataType: <span class="hljs-string">&quot;jsonp&quot;</span>,<br>      success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(res);<br>      &#125;<br>    &#125;);<br><span class="hljs-comment">// 主要是dataType:&quot;jsonp&quot;</span><br></code></pre></td></tr></table></figure><h1 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h1><ul><li>节流<ul><li>概述：单位时间内连续触发的事件只执行一次</li><li>应用：鼠标不断点击事件</li></ul></li><li>防抖<ul><li>概述：事件触发后延迟执行，期间再次触发事件重新延迟执行，直到最后一次触发的执行</li><li>应用：输入框连续输入字符、浏览器窗口大小改变</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Ajax</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>前端</tag>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript高级语法</title>
    <link href="/2021/02/08/javascript%E9%AB%98%E7%BA%A7/"/>
    <url>/2021/02/08/javascript%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h1><ul><li>每一个函数都有一个默认的prototype原型，prototype本质是一个对象</li><li>在protoType定义的属性和方法会被该函数的实例对象继承</li></ul><h1 id="对象的原型"><a href="#对象的原型" class="headerlink" title="对象的原型"></a>对象的原型</h1><ul><li>每一个对象默认有一个__proto__对象原型</li><li>__proto__指向该对象构造函数的原型对象prototype</li></ul><h1 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h1><ul><li>构造函数里的Object.prototype.constructor属性指向该构造函数</li></ul><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><ul><li>每一个对象都有一个对象原型__proto__指向该对象构造函数的原型对象prototype，该对象原型也有一个原型，层层指向最后指向null</li></ul><h1 id="高级数组方法"><a href="#高级数组方法" class="headerlink" title="高级数组方法"></a>高级数组方法</h1><ol><li>快速遍历数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,array</span>)</span>&#123;&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>根据条件筛选数组，返回筛选后的新数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,array</span>)</span>&#123;<span class="hljs-keyword">return</span> 条件&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>判断是否存在一个满足条件的元素，是返回true</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,array</span>)</span>&#123;<span class="hljs-keyword">return</span> 条件&#125;)<br></code></pre></td></tr></table></figure><ol start="4"><li>判断是否所有元素满足条件，是返回true</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,array</span>)</span>&#123;<span class="hljs-keyword">return</span> 条件&#125;)<br></code></pre></td></tr></table></figure><ul><li>以上方法参数为一个回调函数，回调函数的参数为数组的项、索引和数组本身。filter、some、every需要回调函数返回一个判断条件，方法根据条件筛选</li></ul><h1 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h1><ul><li>获取对象所有属性名<ul><li>Object.keys(obj)</li></ul></li><li>定义一个新属性<ul><li>参数一，要增加属性的对象</li><li>参数二，增加的属性名</li><li>参数三，描述符对象<ul><li>value: 属性值 </li><li>writable: 是否可以修改</li><li>enumerable: 是否可以枚举（遍历到）</li><li>configurable: 是否可以删除或再次修改特性</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.defineProperty(对象，属性名，描述符对象)<br></code></pre></td></tr></table></figure><h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><ul><li><p>全局作用域的this指向window</p></li><li><p>局部作用域this指向函数调用者</p></li><li><p>改变this指向的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fn.call(<span class="hljs-built_in">this</span>指向，参数一，参数二……)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fn.apply(<span class="hljs-built_in">this</span>指向，参数数组)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fn.bind(<span class="hljs-built_in">this</span>指向，参数一，参数二……)<br></code></pre></td></tr></table></figure><h1 id="构造函数的继承"><a href="#构造函数的继承" class="headerlink" title="构造函数的继承"></a>构造函数的继承</h1></li><li><p>属性的继承  Father.call(this, name, age)</p><ul><li>在子构造函数内使用，改变父类构造函数的this指向子构造函数的实例</li></ul></li><li><p>方法的继承 Son.prototype =  new Father()</p><ul><li>子构造函数的原型对象指向父构造函数的实例对象</li></ul></li></ul><h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><ul><li>限制javascript的一些松散行为</li><li>作用<ul><li>消除了 js 代码的不合理和不严谨地方，减少怪异行为</li><li>消除了代码的不安全地方，保证代码安全运行</li><li>提高编译器的效率，增加运行的速度</li><li>禁用 ECMAScript 未来版本中可能会定义的一些语法 class extends super 等</li></ul></li><li>使用<ul><li>在script里第一行添加”use strict”,为整个JS添加严格模式</li><li>在函数体内第一行添加”use strict”,为当前函数添加严格模式</li></ul></li></ul><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><ul><li>　函数内定义的变量被其他作用域所访问，即内部函数调用外部函数的变量</li><li>　作用<ul><li>延伸了变量的使用范围</li><li>实现了数据的封装</li><li>实现了数据的缓存（函数的柯里化）</li></ul></li><li>　缺点<ul><li>　容易造成内存泄露</li><li>　加大内存消耗</li></ul></li></ul><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><ul><li><p>　函数内部调用其自身</p></li><li><p>　应用</p><ul><li>　求阶乘</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">n</span>) </span>&#123; <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;<span class="hljs-keyword">return</span> n * fn(n ‐ <span class="hljs-number">1</span>); &#125;<br></code></pre></td></tr></table></figure><ul><li>求斐波那契数列</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fb</span>(<span class="hljs-params">n</span>) </span>&#123; <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span> || n === <span class="hljs-number">2</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;<span class="hljs-keyword">return</span> fb(n ‐ <span class="hljs-number">1</span>) + fb(n ‐ <span class="hljs-number">2</span>); &#125;<br></code></pre></td></tr></table></figure><h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><ul><li><p>　浅拷贝</p><ul><li><p>　对于复杂数据类型，复制其地址</p></li><li><p>　方法</p></li></ul></li></ul><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">｛...<span class="hljs-keyword">object</span>｝<br></code></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>     obj2[key] = obj[key];<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><p>深拷贝</p><ul><li><p>　另外开辟空间复制数据，两者相互独立</p></li><li><p>方法</p></li></ul></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>stringify(<span class="hljs-keyword">object</span>))<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> deep<span class="hljs-constructor">Clone(<span class="hljs-params">obj1</span>, <span class="hljs-params">obj2</span>)</span> &#123;<br>      <span class="hljs-keyword">for</span> (var key <span class="hljs-keyword">in</span> obj1) &#123;<br>        <span class="hljs-comment">//key为数组</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>is<span class="hljs-constructor">Array(<span class="hljs-params">key</span>)</span>) &#123;<br>          obj2<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> = <span class="hljs-literal">[]</span>;<br>          deep<span class="hljs-constructor">Clone(<span class="hljs-params">obj1</span>[<span class="hljs-params">key</span>], <span class="hljs-params">obj2</span>[<span class="hljs-params">key</span>])</span><br><br>          <span class="hljs-comment">//key为对象</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj1<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> instanceof Object) &#123;<br>          obj2<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> = &#123;&#125;;<br>          deep<span class="hljs-constructor">Clone(<span class="hljs-params">obj1</span>[<span class="hljs-params">key</span>], <span class="hljs-params">obj2</span>[<span class="hljs-params">key</span>])</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          obj2<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> = obj1<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul><li><p>作用</p><ul><li>用于检索字符串的一种语法</li></ul></li><li><p>使用</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/123/</span>)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reg=<span class="hljs-regexp">/123/</span><br></code></pre></td></tr></table></figure><ul><li>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">reg.test(string)<br></code></pre></td></tr></table></figure><ul><li><p>边界符</p><ul><li>/^123/ 以123开始</li><li>/123$/ 以123结尾</li><li>/^123$/ 精确匹配，字符个数和类型必须完全一致</li></ul></li><li><p>字符集合</p><ul><li>[0-9a-zA-Z] 匹配单个字符</li></ul></li><li><p>反向字符集合</p><ul><li>[^0-9a-zA-Z] 匹配除0-9a-zA-Z外的字符</li></ul></li><li><p>量字符</p><ul><li><table><thead><tr><th>字符</th><th>出现次数</th></tr></thead><tbody><tr><td>*</td><td>0到多次</td></tr><tr><td>+</td><td>1到多次</td></tr><tr><td>?</td><td>0或1次</td></tr><tr><td>.</td><td>除换行外的字符</td></tr><tr><td>{n}</td><td>n次</td></tr><tr><td>{n,}</td><td>n到多次</td></tr><tr><td>{m,n}</td><td>m到n次</td></tr></tbody></table></li></ul></li><li><p>预定义</p><ul><li><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>\d</td><td>数字</td></tr><tr><td>\D</td><td>非数字</td></tr><tr><td>\w</td><td>字母、数字、下划线</td></tr><tr><td>\W</td><td>非字母、数字、下划线</td></tr><tr><td>\s</td><td>空白符</td></tr><tr><td>\S</td><td>非空白符</td></tr></tbody></table></li></ul></li><li><p>或者</p><ul><li>/123|456/  匹配123或者456</li></ul></li><li><p>修饰符</p><ul><li><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td>/123/g</td><td>全局匹配</td></tr><tr><td>/123/i</td><td>不区分大小写</td></tr><tr><td>/123/gi</td><td>全局匹配且不区分大小写</td></tr></tbody></table></li></ul></li><li><p>字符串匹配</p><ul><li>替换全局匹配的字符串</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">str.replace(<span class="hljs-regexp">/123/g</span>,string)<br></code></pre></td></tr></table></figure><ul><li>返回匹配的字符串数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">str.match(<span class="hljs-regexp">/123/g</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript基础语法</title>
    <link href="/2021/02/08/Javascript%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/02/08/Javascript%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><h3 id="1-Number"><a href="#1-Number" class="headerlink" title="1. Number"></a>1. Number</h3><ul><li><p>八进制：数字前加<code>0</code></p></li><li><p>十六进制：数字前加 <code>0x</code></p></li><li><p>最大值：<code>Number.MAX_VALUE</code></p></li><li><p>最小值：<code>Number.MIN_VALUE</code></p></li><li><p>无穷大：<code>Infinity</code></p></li><li><p>非数字：<code>NaN</code></p></li><li><p><code>isNaN</code>：判断是否为非数字类型，若为数字返回false</p></li></ul><h3 id="2-String"><a href="#2-String" class="headerlink" title="2. String"></a>2. String</h3><ul><li><p>字符串需要包括在单引号后者双引号之中</p></li><li><p>转义字符：\n、\t、\b等</p></li><li><p>计算字符串长度，使用属性：<code>legnth</code></p></li><li><p>字符串连接使用<code>+</code></p></li></ul><h3 id="3-Boolean"><a href="#3-Boolean" class="headerlink" title="3. Boolean"></a>3. Boolean</h3><ul><li>true和数字运算时结果为1，false和数字运算结果为0</li></ul><h3 id="4-Undefined"><a href="#4-Undefined" class="headerlink" title="4.Undefined"></a>4.Undefined</h3><ul><li>未定义数据类型与数字运算结果为NaN</li></ul><h3 id="5-Null"><a href="#5-Null" class="headerlink" title="5. Null"></a>5. Null</h3><ul><li>空类型与数字运算为0</li></ul><h2 id="二、typeof"><a href="#二、typeof" class="headerlink" title="二、typeof"></a>二、typeof</h2><ul><li>获取数据的类型</li></ul><h2 id="三、数据类型转换"><a href="#三、数据类型转换" class="headerlink" title="三、数据类型转换"></a>三、数据类型转换</h2><h3 id="1-转化为字符串类型"><a href="#1-转化为字符串类型" class="headerlink" title="1. 转化为字符串类型"></a>1. 转化为字符串类型</h3><ul><li><p>toString()</p></li><li><p>String()</p></li><li><p>使用“+”拼接</p></li></ul><h3 id="2-转化为数字类型"><a href="#2-转化为数字类型" class="headerlink" title="2. 转化为数字类型"></a>2. 转化为数字类型</h3><ul><li><p>parseInt()，会舍去小数部分，可以去除数值后面的单位</p></li><li><p>parseFloat()，可以去除数值后面的单位</p></li><li><p>Number()</p></li><li><p>进行减乘除运算</p></li></ul><h3 id="3-转化为布尔类型"><a href="#3-转化为布尔类型" class="headerlink" title="3. 转化为布尔类型"></a>3. 转化为布尔类型</h3><ul><li>Boolean()，其中” “、0、null、undefined、NaN转化为false，其余转化为true</li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="一、算数运算符"><a href="#一、算数运算符" class="headerlink" title="一、算数运算符"></a>一、算数运算符</h2><ul><li>加（+）、减（-）、乘（*）、除（/）、取余（%）</li></ul><h2 id="二、自运算"><a href="#二、自运算" class="headerlink" title="二、自运算"></a>二、自运算</h2><ul><li>前置自增（自减），先运算，后返回值。</li><li>后置自增（自减），先返回值，后运算。</li></ul><h2 id="三、比较运算符"><a href="#三、比较运算符" class="headerlink" title="三、比较运算符"></a>三、比较运算符</h2><ul><li>大于（&gt;）、小于（&lt;）、大于等于（&gt;=）、小于等于（&lt;=）、等于（==），不等于（!=）、全等于（===），不全等（!==）</li><li>大于（&gt;）、小于（&lt;）、大于等于（&gt;=）、小于等于（&lt;=）、等于（==），<br>存在隐式转换、全等（===），必须是值和数据类型完全相同。</li></ul><h2 id="四、逻辑运算符"><a href="#四、逻辑运算符" class="headerlink" title="四、逻辑运算符"></a>四、逻辑运算符</h2><ul><li>逻辑与（&amp;&amp;）<ul><li>全部为true，则结果为true</li></ul></li><li>逻辑或（||）<ul><li>只要有一个结果为true，结果为true</li></ul></li><li>逻辑非（!）<ul><li>取反，true取反为flase；false取反为true</li></ul></li><li>逻辑中断<ul><li>多个表达式运算时，当获取到确定结果时 ，返回结果，后续代码将不再运行。</li></ul></li></ul><h2 id="五、赋值运算符"><a href="#五、赋值运算符" class="headerlink" title="五、赋值运算符"></a>五、赋值运算符</h2><ul><li>赋值（=）、加等于（+=）、减等于（-=）、乘等于（*=）、除等于（/=）、取余等于（%=）</li></ul><h2 id="六、运算符优先级"><a href="#六、运算符优先级" class="headerlink" title="六、运算符优先级"></a>六、运算符优先级</h2><ol><li>括号 （）</li><li>单元运算符（++、–、！）</li><li>算数运算符（*、/、%、+、-，先乘除后加减）</li><li>比较运算符（&gt;=、&lt;=、&gt;、&lt;、==、===、!=、!==）</li><li>逻辑运算符（&amp;&amp;、||，先&amp;&amp;后||）</li><li>赋值运算符（=）</li><li>逗号运算符 （，）</li></ol><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="一、顺序"><a href="#一、顺序" class="headerlink" title="一、顺序"></a>一、顺序</h2><ul><li>程序依据顺序执行</li></ul><h2 id="二、分支"><a href="#二、分支" class="headerlink" title="二、分支"></a>二、分支</h2><h3 id="1-if（条件表达式）-…-else-…"><a href="#1-if（条件表达式）-…-else-…" class="headerlink" title="1. if（条件表达式）{…}-else{…}"></a>1. if（条件表达式）{…}-else{…}</h3><ul><li>条件表达式为true执行if里面代码块，否则执行else里面代码块</li></ul><h3 id="2-三元表达式"><a href="#2-三元表达式" class="headerlink" title="2.三元表达式"></a>2.三元表达式</h3><ul><li>条件表达式？表达式一：表达式二；条件表达式结果为true执行表达式一，否则执行表达式二</li></ul><h3 id="3-switch"><a href="#3-switch" class="headerlink" title="3. switch"></a>3. switch</h3><ul><li>case，匹配switch的条件表达式</li><li>break，退出switch</li><li>default，默认选项，若没有匹配到任何case，执行此语句</li></ul><h2 id="三、循环"><a href="#三、循环" class="headerlink" title="三、循环"></a>三、循环</h2><h3 id="1-for（var-i-0；i-lt-number；i-）-…"><a href="#1-for（var-i-0；i-lt-number；i-）-…" class="headerlink" title="1. for（var i=0；i&lt;number；i++）{…}"></a>1. for（var i=0；i&lt;number；i++）{…}</h3><ul><li>最常用，经常使用嵌套循环</li></ul><h3 id="2-while-表达式-…"><a href="#2-while-表达式-…" class="headerlink" title="2.while(表达式){…}"></a>2.while(表达式){…}</h3><ul><li>先判断再执行循环体</li></ul><h3 id="3、do-…-while-表达式"><a href="#3、do-…-while-表达式" class="headerlink" title="3、do{…}while(表达式)"></a>3、do{…}while(表达式)</h3><ul><li>先执行循环体再判断</li></ul><h3 id="4、关键字"><a href="#4、关键字" class="headerlink" title="4、关键字"></a>4、关键字</h3><ul><li>continue，跳出当前循环，继续执行下一次循环</li><li>break，退出整个循环</li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>数组可以存储任意类型的数据</li></ul><h2 id="二、创建数组"><a href="#二、创建数组" class="headerlink" title="二、创建数组"></a>二、创建数组</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br></code></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr=[];<br></code></pre></td></tr></table></figure><h2 id="三、属性"><a href="#三、属性" class="headerlink" title="三、属性"></a>三、属性</h2><ul><li>length，获取数组长度</li></ul><h3 id="四、新增数据"><a href="#四、新增数据" class="headerlink" title="四、新增数据"></a>四、新增数据</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr[arr.length]=<span class="hljs-string">&quot;new data&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="五、应用"><a href="#五、应用" class="headerlink" title="五、应用"></a>五、应用</h3><ol><li>遍历数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>   <span class="hljs-built_in">console</span>.log(arr[i]);<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>求最大值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>                max = arr[i];<br>     &#125; <br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>冒泡排序</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>          <span class="hljs-comment">//内层循环循环次数</span><br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>              <span class="hljs-comment">//交换数据</span><br>              <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                  <span class="hljs-keyword">var</span> temp = arr[j];<br>                  arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                  arr[j + <span class="hljs-number">1</span>] = temp;<br>              &#125;<br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="一、概述-1"><a href="#一、概述-1" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>一段可以重复使用的代码块</li></ul><h2 id="二、函数声明"><a href="#二、函数声明" class="headerlink" title="二、函数声明"></a>二、函数声明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params"></span>)</span>&#123;&#125;;  <span class="hljs-comment">//存在函数提升</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;  <span class="hljs-comment">//不存在函数提升</span><br></code></pre></td></tr></table></figure><h2 id="三、参数"><a href="#三、参数" class="headerlink" title="三、参数"></a>三、参数</h2><ul><li>形参<ul><li>形式上的参数，函数声明时内部使用</li></ul></li><li>实参<ul><li>实际参数，函数调用时赋值给形参带入函数体使用</li></ul></li><li>形参多于实参<ul><li>多余的形参值为undefined，运算结果为NaN</li></ul></li><li>实参多于形参<ul><li>按照实际的形参个数进行执行</li></ul></li><li>默认参数<ul><li>可以直接给形参默认值，当输入实参时覆盖默认值</li></ul></li><li>无法确定参数个数<ul><li>使用arguments接收传递来的实参，arguments是一个伪数组，具有length属性，可以按照索引取值，可以遍历，但是不具备数组的一些方法</li></ul></li></ul><h2 id="四、返回值"><a href="#四、返回值" class="headerlink" title="四、返回值"></a>四、返回值</h2><ul><li>return，函数只有一个返回值，当函数返回时后面代码不再执行</li></ul><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="一、全局作用域"><a href="#一、全局作用域" class="headerlink" title="一、全局作用域"></a>一、全局作用域</h2><ul><li>全局作用域定义的变量为全局变量，变量不声明直接赋值也可以直接转化为全局变量</li></ul><h2 id="二、局部作用域"><a href="#二、局部作用域" class="headerlink" title="二、局部作用域"></a>二、局部作用域</h2><ul><li>局部作用域定义的变量为局部作用域，局部变量，在代码块中声明的变量</li></ul><h2 id="三、注意"><a href="#三、注意" class="headerlink" title="三、注意"></a>三、注意</h2><ul><li>在ES5中没有块级作用域</li></ul><h1 id="JS代码执行过程"><a href="#JS代码执行过程" class="headerlink" title="JS代码执行过程"></a>JS代码执行过程</h1><ol><li>语法检查<ul><li>检查语法错误</li></ul></li><li>预解析<ul><li>提升变量和函数，函数提升优于变量，把带有var和function定义的变量提升到作用域前面</li></ul></li><li>代码执行<ul><li>代码按照顺序执行</li></ul></li></ol><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="一、概述-2"><a href="#一、概述-2" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>一组无序属性和方法的键值对集合</li></ul><h2 id="二、属性"><a href="#二、属性" class="headerlink" title="二、属性"></a>二、属性</h2><ul><li>获取属性<ul><li>对象.属性名或者对象[“属性名”]</li></ul></li><li>新增属性<ul><li>对象.属性名=值</li></ul></li><li>修改属性<ul><li>对象.属性名=值</li></ul></li></ul><h2 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h2><ul><li>新增方法<ul><li>fn:function(){}</li></ul></li><li>调用方法<ul><li>object.fn()</li></ul></li></ul><h2 id="四、创建对象"><a href="#四、创建对象" class="headerlink" title="四、创建对象"></a>四、创建对象</h2><ol><li>字面量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    name: <span class="hljs-string">&quot;张三&quot;</span>,<br>    age: <span class="hljs-number">0</span>,<br>    run: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>new</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure><ol start="3"><li>构造函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Obj</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.run = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><table><thead><tr><th>属性方法</th><th>概述</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.random()</td><td>取[0,1)中随机浮点数</td></tr></tbody></table><ul><li>取任意[a,b]之间整数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params">a, b</span>) </span>&#123;<span class="hljs-keyword">return</span> a + <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * (b - a + <span class="hljs-number">1</span>));&#125;<br></code></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><ul><li>创建日期对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> date=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><ul><li>创建指定日期对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> date=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2020-12-12 12:00:00&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>常用方法</li></ul><table><thead><tr><th align="left">方法</th><th>概述</th></tr></thead><tbody><tr><td align="left">getFullYear()</td><td>获取年</td></tr><tr><td align="left">getMonth()</td><td>获取月(0-11)</td></tr><tr><td align="left">getDate()</td><td>获取日</td></tr><tr><td align="left">getDay()</td><td>获取周(0-6)</td></tr><tr><td align="left">getHours()</td><td>获取时</td></tr><tr><td align="left">getMinutes()</td><td>获取分</td></tr><tr><td align="left">getSeconds()</td><td>获取秒</td></tr></tbody></table><ul><li>获取时间戳<ul><li>日期对象.valueOf()</li><li>日期对象.getTime()</li><li>+new Date()</li><li>Date.now()</li></ul></li></ul><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th><th>修改原数组</th></tr></thead><tbody><tr><td><strong><code>★push(n1, n2)</code></strong></td><td>追加元素到数组末尾</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>unshift(n1, n2)</code></strong></td><td>追加元素到数组开头</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>Array.isArray()</code></strong></td><td>判断一个值是否是数组</td><td>值或变量</td><td>布尔值</td><td>–</td></tr><tr><td><strong><code>pop()</code></strong></td><td>从数组末尾删除一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>shift()</code></strong></td><td>从数组开头添加一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>sort(fn)</code></strong></td><td>对数组进行排序</td><td>函数</td><td>排序后的数组</td><td>修改</td></tr><tr><td><strong><code>reverse()</code></strong></td><td>对数组进行翻转</td><td>无</td><td>翻转后的数组</td><td>修改</td></tr><tr><td><strong><code>★indexOf(元素)</code></strong></td><td>查找元素在数组中第一次出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>lastIndexOf(元素)</code></strong></td><td>从后向前查找元素在数组中出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>★join(连接符)</code></strong></td><td>把数组中元素连接并返回字符串</td><td>连接符</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>toString()</code></strong></td><td>把复杂数据类型转成字符串形式</td><td>无</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从m位置开始截取数组到n结束</td><td>索引值</td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>★splice(m, n)</code></strong></td><td>从m位置开始删除数组, 删除n个</td><td>(索引, 个数)</td><td>删除元素的新数组</td><td>会修改</td></tr><tr><td><strong><code>concat(arr1, arr2)</code></strong></td><td>拼接两个或多个数组</td><td>要拼接的数组</td><td>拼接后的新数组</td><td>不会修改</td></tr><tr><td><strong><code>★forEach(fn)</code></strong></td><td>快速遍历数组</td><td><code>fn(item, index)</code></td><td>undefined</td><td>不会修改</td></tr><tr><td><strong><code>★filter(fn)</code></strong></td><td>从数组中筛选出所有符合条件的元素</td><td><code>fn(item, index)</code></td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>some(fn)</code></strong></td><td>判断数组中是否有符合条件的某个元素</td><td><code>fn(item, index)</code></td><td>布尔值</td><td>不会修改</td></tr><tr><td><strong><code>every(fn)</code></strong></td><td>判断数组中是否所有元素都符合条件</td><td><code>fn(item, index)</code></td><td>布尔值</td><td>不会修改</td></tr><tr><td><strong><code>Array.from(obj[,fn])</code></strong></td><td>把其他类型的数据转成数组</td><td>其他类型数据</td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>★find(fn)</code></strong></td><td>查找数组中符合条件的第一个元素</td><td><code>fn(item, index)</code></td><td>元素值或undefined</td><td>不会修改</td></tr><tr><td><strong><code>findIndex(fn )</code></strong></td><td>查找数组中符合条件的第一个元素的索引</td><td><code>fn(item, index)</code></td><td>索引号或-1</td><td>不会修改</td></tr><tr><td><strong><code>includes(固定值)</code></strong></td><td>判断数组是否包含给定的值</td><td>固定值</td><td>布尔值</td><td>不会</td></tr><tr><td><strong><code>★map(fn)</code></strong></td><td>基于原数组去创建一个新数组</td><td><code>fn(item, index)</code></td><td>新数组</td><td>不会</td></tr></tbody></table><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><strong><code>length</code></strong></td><td>获取字符串的长度</td><td>无</td><td>字符串的长度</td></tr><tr><td><strong><code>★str[i]</code></strong></td><td>获取指定索引位置的字符</td><td>无</td><td>单个字符</td></tr><tr><td><strong><code>charAt(i)</code></strong></td><td>获取指定索引位置的字符</td><td>索引</td><td>单个字符</td></tr><tr><td><strong><code>★indexOf(字符[, n])</code></strong></td><td>从位置 n 开始查找字符的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>lastIndexOf(字符)</code></strong></td><td>从后向前查找字符出现的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★substr(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截取 n 位数</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>substring(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★split(分隔符)</code></strong></td><td>把字符串按照指定的分隔符分隔成数组</td><td>分隔符</td><td>新数组</td></tr><tr><td><strong><code>toUpperCase()</code></strong></td><td>把字符串中的小写字母转大写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong><code>toLowerCase()</code></strong></td><td>把字符串中的大写字母转小写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong><code>★trim()</code></strong></td><td>去除字符串两端的空格</td><td>无</td><td>去除空格后的字符</td></tr><tr><td><strong><code>startsWidth()</code></strong></td><td>判断字符串是否以某些字符开头</td><td>字符串</td><td>布尔值</td></tr><tr><td><strong><code>endsWidth()</code></strong></td><td>判断字符串是否以某些字符结尾</td><td>字符串</td><td>布尔值</td></tr><tr><td><strong><code>repeat(n)</code></strong></td><td>将某个字符串重复 n 次</td><td>重复的次数</td><td>新字符串</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腹有诗书气自华</title>
    <link href="/2021/01/28/%E8%AF%97%E5%8F%A5/"/>
    <url>/2021/01/28/%E8%AF%97%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="古诗句"><a href="#古诗句" class="headerlink" title="古诗句"></a>古诗句</h1><h2 id="可怜无定河边骨-犹是春闺梦里人"><a href="#可怜无定河边骨-犹是春闺梦里人" class="headerlink" title="可怜无定河边骨,犹是春闺梦里人"></a>可怜无定河边骨,犹是春闺梦里人</h2><h2 id="最是人间留不住-朱颜辞镜花辞树"><a href="#最是人间留不住-朱颜辞镜花辞树" class="headerlink" title="最是人间留不住,朱颜辞镜花辞树"></a>最是人间留不住,朱颜辞镜花辞树</h2>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 使用</title>
    <link href="/2021/01/28/Hexo%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/01/28/Hexo%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到博客!!!</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建新帖子"><a href="#创建新帖子" class="headerlink" title="创建新帖子"></a>创建新帖子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html">写作</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html">服务器</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html">生成</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">部署</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
